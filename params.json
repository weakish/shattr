{
  "name": "shattr",
  "tagline": "A `shatag` clone in Ceylon.",
  "body": "shattr\r\n========\r\n\r\nA [shatag][] clone in Ceylon.\r\n\r\n[shatag]: https://bitbucket.org/maugier/shatag\r\n\r\nStatus\r\n-------\r\n\r\nWIP.\r\n\r\nWhy\r\n----\r\n\r\n`shatag -rl` is slow since it needs to query SQL database for every file.\r\nInstead `shattr` reads all SHA-256 checksums in memory.\r\n\r\nInstallation\r\n--------------\r\n\r\nWith `ceylon` and `shatag` installed:\r\n\r\n1. Clone this repository to a directory, e.g. `opt`.\r\n2. Edit `shattr_repo` to the cloned repository in `shattr`, e.g. `/opt/shattr`.\r\n3. Put `shattr` into PATH.\r\n\r\n\r\nUsage\r\n------\r\n\r\n    shattr PATH_TO_HASHLIST\r\n\r\nwill print status of files under the current directory.\r\n\r\n```\r\nN empty file\r\nD duplicated file\r\nU unique file\r\n? unknown file (without `sha256` xattr, no read permission, etc)\r\n```\r\n\r\nIf `PATH_TO_HASHLIST` is not specified,\r\n`shattr` will use `~/.shatagdb-hash-list.txt`.\r\n\r\n`PATH_TO_HASHLIST` is a text file,\r\ncontaining all SHA256 hashes of known files, one per line, **sorted**.\r\n\r\n`PATH_TO_HASHLIST` had to be produced manually yet.\r\nFor example, if using `shatag` with an sqlite3 backend,\r\n`PATH_TO_HASHLIST` can be produced via:\r\n\r\n```sh\r\nsqlite3 -noheader -csv ~/.shatagdb \"select hash from contents;\" > hashlist.csv\r\n```\r\n\r\nNote if `shattr` encounter a file without `user.shatag.sha256` file,\r\nit will call `shatag` to write the xattr, nonblockingly.\r\nThus if `shatag` succeed, `shattr` will check the file on the next run.\r\n\r\nLicense\r\n--------\r\n\r\n0BSD.\r\n\r\nTodo\r\n----------\r\n\r\nTo manage file operation history, we can use `git` as a backend,\r\ninstead of SQL databases used by `shatag`.\r\n\r\n### Choice 1\r\n\r\nUse filename as key:\r\n\r\n```ceylon\r\nString repo = \"~/.local/var/shattr/repo\";\r\nString host = \"hostname\";\r\nString fileName = \"``repo``/hostname/path/to/original/file\";\r\n```\r\n\r\nContent is compatible with git-lfs:\r\n\r\n```\r\nversion https://git-lfs.github.com/spec/v1\r\noid sha256:f4ddae8469a15fb96fea5bfb3340526fe415a6cfc5bc6deebf5ae418b407364d\r\nsize 21\r\n```\r\n\r\nPros:\r\n\r\nJust use ordinal file operations like `mv` and `rm`, etc.\r\n\r\nCons:\r\n\r\n1. We need to build separated index of sha256, pointing to `Array<Path>`.\r\n\r\n2. A huge number of files will exhaust inodes of file system and slow down git.\r\n\r\n    > Scaling to hundreds of thousands of files is not a problem,\r\n    > scaling beyond that and git will start to get slow.\r\n\r\n    -- [git-annex wiki](https://git-annex.branchable.com/scalability/)\r\n\r\n    I have 1904875 files(and growing).\r\n\r\n### Choice 2\r\n\r\nUse `sha256` as key:\r\n\r\n```Ceylon\r\nString repo = \"~/.local/var/shattr/repo\";\r\nString fileName = \"``repo``/sha256\"\r\n```\r\n\r\nContent\r\n\r\n```\r\nversion https://git-lfs.github.com/spec/v1\r\noid sha256:f4ddae8469a15fb96fea5bfb3340526fe415a6cfc5bc6deebf5ae418b407364d\r\nsize 21\r\npaths hostname:/path/to/file;another:/path/to/file\r\n```\r\n\r\nWe still have `oid` field to conform git-lfs specification.\r\n\r\nCons:\r\n\r\n1. Ordinal file operations like `mv` and `rm` does not work\r\n    (unless we implement a FUSE file system).\r\n\r\n2. Still a huge number of files.\r\n    I have 1338211 (and growing).\r\n\r\n### Option 3\r\n\r\nOption 1 + separated repositories for videos, audios, books etc.\r\n\r\nPros:\r\n\r\n1. Same as Option 1.\r\n\r\nCons:\r\n\r\n1. Same as Option 1, except file numbers.\r\n2. Inter-repository operation is difficult to handle.\r\n\r\n### Option 4\r\n\r\nOption 2 + separated repositories.\r\n\r\nCons:\r\n\r\nRefer to Option 2 and Option 3.\r\n\r\n### Option 5\r\n\r\nUse one big text file (e.g. csv) to record all meta data, sorted by `sha256`.\r\n\r\nCons:\r\n\r\nSame as Option 2 except file number issue becomes file size issue.\r\n\r\n### Option 6\r\n\r\nOption 5 + separated text files.\r\n\r\nCons:\r\n\r\nRefer to Option 2 and Option 3.\r\n\r\n### Option 7\r\n\r\nWithout git, use Java  object persistence, like [Prevayler][].\r\n\r\n[Prevayler]:http://prevayler.org/\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}
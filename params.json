{
  "name": "shattr",
  "tagline": "A `shatag` clone in Ceylon.",
  "body": "shattr\r\n========\r\n\r\nA [shatag][] clone in Ceylon.\r\n\r\n[shatag]: https://bitbucket.org/maugier/shatag\r\n\r\nStatus\r\n------\r\n\r\nBasic features implemented:\r\n\r\n- `--lookup`: Lookup for duplicates.\r\n- `--scrub`: Recompute checksums to detect silent corruption.\r\n- `--tag`: Compute new checksums for files that don't have one, or when it is outdated.\r\n\r\nWhy\r\n----\r\n\r\n`shatag -rl` is slow since it needs to query SQL database for every file.\r\n`shattr` reads all SHA-256 checksums in memory instead.\r\n\r\nInstallation\r\n--------------\r\n\r\n### With `ceylon`\r\n\r\nIf you have `Ceylon` installed, you can download the `.car` archive (`< 4K`) at\r\n[Releases][] and put it into [Ceylon module repository][repo].\r\nIf your `ceylon` is recent enough, you can package it to a jar file via `ceylon --fat-jar`.\r\nRunning with `java -jar` starts faster than `ceylon run`.\r\n\r\n[Releases]: https://github.com/weakish/shattr/releases\r\n[repo]: http://ceylon-lang.org/documentation/1.2/reference/repository/\r\n\r\n### With `java` directly\r\n\r\nIf you have Java Runtime (7+) installed , but not Ceylon,\r\nyou can download the fat jar file (`3.2M`).\r\n\r\n### Compile manually\r\n\r\nClone this repository and run `ceylon compile`.\r\n\r\nTested with `Ceylon 1.2+`.\r\nMay work with older versions.\r\n\r\nUsage\r\n------\r\n\r\n### Lookup\r\n\r\n    $SHATTR_COMMAND -l PATH_TO_HASHLIST\r\n\r\nwill print status of files under the current directory.\r\n\r\n\r\n    N empty file\r\n    D duplicated file\r\n    U unique file\r\n    ? unknown file (without `sha256` xattr, no read permission, etc)\r\n\r\n\r\n`$SHATTR_COMMAND` is one of:\r\n\r\n- `ceylon run io.github.weakish.shattr` if using `Ceylon`;\r\n- `java -jar /path/to/io.github.weakish.shattr-0.2.0.jar` if using `java` directly.\r\n\r\nIf `PATH_TO_HASHLIST` is not specified,\r\n`shattr` will use `~/.shatagdb-hash-list.txt`.\r\n\r\n#### Hash list format\r\n\r\n`PATH_TO_HASHLIST` is a text file,\r\ncontaining all SHA256 hashes of known files, one per line.\r\n\r\nFor example, if using `shatag` with an sqlite3 backend,\r\n`PATH_TO_HASHLIST` can be produced via:\r\n\r\n```sh\r\nsqlite3 -noheader -csv ~/.shatagdb \"select hash from contents;\" > hashlist.csv\r\n```\r\n\r\n#### Customize output\r\n\r\nBy default we use a git status style output.\r\nYou can change output format style with `--format FORMAT`.\r\n`FORMAT` is one of `git`, `inotifywait`, and `csv`.\r\n`--format FORMAT` should be specified *before* hash list file.\r\n\r\n##### `--format inotifywait`\r\n\r\n    EMPTY empty file\r\n    DUMPLICATED duplicated file\r\n    UNIQUE unique file\r\n    UNKNOWN file (without `sha256` xattr, no read permission, etc)\r\n\r\n##### `--format csv`\r\n\r\nLike `--format inotifywait`, but separated with comma `,`, with path name quoted.\r\n\r\n    EMPTY,\"empty_file.txt\"\r\n    UNIQUE,\"A file containing spaces and \"\"double quotes\"\"\"\r\n\r\n##### `--format your_own`\r\n\r\nYou need to write a formatting function typed `String(Status, Path)`.\r\nThen register it in command line option parsing code in `run()`.\r\n\r\n### scrub/tag\r\n\r\n    $SHATTR_COMMAND -s\r\n    $SHATTR_COMMAND -t\r\n\r\nWill compute checksums for all files under current directory (recursively).\r\n\r\nUnlike `shatag`, `-t` will warn if checksum changes.\r\n\r\nContribute\r\n----------\r\n\r\nSend pull requests at <https://github.com/weakish/shattr>.\r\n\r\n### Coding style\r\n\r\n#### Prefer `if . then . else .` to `. then . else .`\r\n\r\nWe feel `A then B else C` is confusing.\r\n\r\nReaders may think `A then B else C` is `A ? B : C` in other languages, but they are **not the same**:\r\n\r\n1. `A then B else C` is actually `(A then B) else C`:\r\n\r\n\t * `A then B` evaluates to `B` if `A` is not `null`, otherwise evaluates to `null`.\r\n\t * `X else Y` evaluates to `X` if `X` is not `null`, otherwise evaluates to `Y`.\r\n\r\n2. Thus the type of `B` is `T given T satisfies Object`, i.e. requires to not be `null`.\r\n\r\nI think `if (A) then B else C` is much cleaner.\r\n\r\n#### Only use `i++` to increase `i`.\r\n\r\n`y=i++` and `y=++i` is really confusing to me.\r\n\r\nSo I prefer to only uses `i++` to increase `i`, e.g. in a while loop.\r\nI think a meaningful evaluated value of `i++` should be `void`\r\nif the a programming language allows `++`.\r\n\r\nSame applies to `i--` and `--i`.\r\n\r\n#### Prefer functions to classes\r\n\r\nWe prefer to declare classes for new types (or type aliases).\r\n\r\n#### Other\r\n\r\nIf you disagree the above, file an issue.\r\n\r\nSend pull requests to add new coding style.\r\n\r\nPlease do not add formatting style such as `use two spaces` and `closing braces on their own line`.\r\nFormatting style is unlikely to affect readability of code,\r\nand can be auto adjusted via `ceylon format`.\r\n\r\nLicense\r\n--------\r\n\r\n0BSD.\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}